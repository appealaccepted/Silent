if not game:IsLoaded() then
    game.Loaded:Wait()
end

loadstring(game:HttpGet("https://raw.githubusercontent.com/appealaccepted/Silent/main/MayhemResolver"))()

local Settings = {
    Silent = {
        Enabled = true,
        Part = "HumanoidRootPart",
        Pred = 0.119,
        ClosestPart = true,
    },
    FOV = {
        Visible = false,
        Radius = 15.5
    },
    Resolver = {
        UnderGround = false,
        UseUnderGroundKeybind = true,
        UnderGroundKey = Enum.KeyCode.C,
        DetectDesync = true,
        Detection = 75,
 
        UseDetectDesyncKeybind = true,
        DetectDesyncKey = Enum.KeyCode.V,
        SendNotification = true
      },
     Spoofer = {
        MemorySpoofer = true,
        MemoryTabColor = Color3.fromRGB(211, 88, 33),
        MemoryMost = 85000,
        MemoryLeast = 80000,
 
        PingSpoofer = true,
        PingTabColor = Color3.fromRGB(211, 88, 33),
        PingMost = 2000,
        PingLeast = 5,
     }
}

local Players, Client, Mouse, RS, Camera =
    game:GetService("Players"),
    game:GetService("Players").LocalPlayer,
    game:GetService("Players").LocalPlayer:GetMouse(),
    game:GetService("RunService"),
    game.Workspace.CurrentCamera

local Circle = Drawing.new("Circle")
Circle.Color = Color3.new(1,1,1)
Circle.Thickness = 1

local UpdateFOV = function ()
    if (not Circle) then
        return Circle
    end
    Circle.Visible = Settings.FOV["Visible"]
    Circle.Radius = Settings.FOV["Radius"] * 3
    Circle.Position = Vector2.new(Mouse.X, Mouse.Y + (game:GetService("GuiService"):GetGuiInset().Y))
    return Circle
end

RS.Heartbeat:Connect(UpdateFOV)

ClosestPlrFromMouse = function()
    local Target, Closest = nil, 1/0
 
    for _ ,v in pairs(Players:GetPlayers()) do
        if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
            local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
            local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude

            if (Circle.Radius > Distance and Distance < Closest and OnScreen) then
                Closest = Distance
                Target = v
            end
        end
    end
    return Target
end

local WTS = function (Object)
    local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
    return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local IsOnScreen = function (Object)
    local IsOnScreen = Camera:WorldToScreenPoint(Object.Position)
    return IsOnScreen
end

local FilterObjs = function (Object)
    if string.find(Object.Name, "Gun") then
        return
    end
    if table.find({"Part", "MeshPart", "BasePart"}, Object.ClassName) then
        return true
    end
end

local GetClosestBodyPart = function (character)
    local ClosestDistance = 1/0
    local BodyPart = nil
    if (character and character:GetChildren()) then
        for _,  x in next, character:GetChildren() do
            if FilterObjs(x) and IsOnScreen(x) then
                local Distance = (WTS(x) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if (Circle.Radius > Distance and Distance < ClosestDistance) then
                    ClosestDistance = Distance
                    BodyPart = x
                end
            end
        end
    end
    return BodyPart
end

local Prey

task.spawn(function ()
    while task.wait() do
        if Prey then
            if Settings.Silent.Enabled and Settings.Silent.ClosestPart == true then
                Settings.Silent["Part"] = tostring(GetClosestBodyPart(Prey.Character))
            end
        end
    end
end)

local grmt = getrawmetatable(game)
local backupindex = grmt.__index
setreadonly(grmt, false)

grmt.__index = newcclosure(function(self, v)
    if (Settings.Silent.Enabled and Mouse and tostring(v) == "Hit") then

        Prey = ClosestPlrFromMouse()

        if Prey then
            local endpoint = game.Players[tostring(Prey)].Character[Settings.Silent["Part"]].CFrame + (
                game.Players[tostring(Prey)].Character[Settings.Silent["Part"]].Velocity * Settings.Silent.Pred
            )
            return (tostring(v) == "Hit" and endpoint)
        end
    end
    return backupindex(self, v)
end)

local UIS = game:GetService("UserInputService")

UIS.InputBegan:Connect(function(keyinput, stupid)
	if keyinput.KeyCode == Settings.Resolver.UnderGroundKey and Settings.Enabled == true and Settings.Resolver.UseUnderGroundKeybind == true then
		if Settings.Resolver.UnderGround == true then
			Settings.Resolver.UnderGround = false
			if Settings.Resolver.SendNotification then
				game:GetService("StarterGui"):SetCore(
					"SendNotification",
				{
					Title = "Mayhem V1",
					Text = "Disabled UnderGround Resolver",
					Icon = "rbxassetid://0",
					Duration = 1
				}
				)
			end
		else
			Settings.Resolver.UnderGround = true
			if Settings.Resolver.SendNotification then
				game:GetService("StarterGui"):SetCore(
					"SendNotification",
				{
					Title = "Mayhem V1",
					Text = "Enabled UnderGround Resolver",
					Icon = "rbxassetid://0",
					Duration = 1
				}
				)
			end
		end
	end
end)

UIS.InputBegan:Connect(function(keyinput, stupid)
	if keyinput.KeyCode == Settings.Resolver.DetectDesyncKey and Settings.Enabled == true and Settings.Resolver.UseDetectDesyncKeybind == true then
		if Settings.Resolver.DetectDesync == true then
			Settings.Resolver.DetectDesync = false
			if Settings.Resolver.SendNotification then
				game:GetService("StarterGui"):SetCore(
					"SendNotification",
				{
					Title = "Mayhem V1",
					Text = "Disabled Desync Resolver",
					Icon = "rbxassetid://0",
					Duration = 1
				}
			)
			end
		else
			Settings.Resolver.DetectDesync = true
			if Settings.Resolver.SendNotification then
				game:GetService("StarterGui"):SetCore(
					"SendNotification",
				{
					Title = "Mayhem V1",
					Text = "Enabled Desync Resolver",
					Icon = "rbxassetid://0",
					Duration = 1
				}
			)
			end
		end
	end
end)

            local PerformanceStats = game:GetService("CoreGui"):WaitForChild("RobloxGui"):WaitForChild("PerformanceStats")
 
            local MemLabel
            local color,
                color1,
                color2,
                color3,
                color4,
                color5,
                color6,
                color7,
                color8,
                color9,
                color10,
                color11,
                color12,
                color13,
                color14,
                color15,
                color16,
                color17,
                color18,
                color19
            for I, Child in next, PerformanceStats:GetChildren() do
                if Child.StatsMiniTextPanelClass.TitleLabel.Text == "Mem" then
                    MemLabel = Child.StatsMiniTextPanelClass.ValueLabel
                    color = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_0
                    color1 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_1
                    color2 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_2
                    color3 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_3
                    color4 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_4
                    color5 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_5
                    color6 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_6
                    color7 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_7
                    color8 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_8
                    color9 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_9
                    color10 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_10
                    color11 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_11
                    color12 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_12
                    color13 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_13
                    color14 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_14
                    color15 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_15
                    color16 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_16
                    color17 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_17
                    color18 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_18
                    color19 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_19
                    break
                end
            end
            MemLabel:GetPropertyChangedSignal("Text"):Connect(
                function()
                    if Settings.Spoofer.MemorySpoofer == true then
                        MemLabel.Text = math.random(Settings.Spoofer.MemoryLeast, Settings.Spoofer.MemoryMost) / 100 .. " MB"
                        color.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color1.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color2.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color3.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color4.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color5.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color6.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color7.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color8.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color9.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color10.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color11.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color12.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color13.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color14.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color15.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color16.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color17.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color18.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                        color19.BackgroundColor3 = Settings.Spoofer.MemoryTabColor
                    end
                end
            )
             
            local PingLabel
            for I, Child in next, PerformanceStats:GetChildren() do
                if Child.StatsMiniTextPanelClass.TitleLabel.Text == "Ping" then
                    PingLabel = Child.StatsMiniTextPanelClass.ValueLabel
                    color = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_0
                    color1 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_1
                    color2 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_2
                    color3 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_3
                    color4 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_4
                    color5 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_5
                    color6 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_6
                    color7 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_7
                    color8 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_8
                    color9 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_9
                    color10 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_10
                    color11 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_11
                    color12 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_12
                    color13 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_13
                    color14 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_14
                    color15 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_15
                    color16 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_16
                    color17 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_17
                    color18 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_18
                    color19 = Child.PS_AnnotatedGraph.PS_BarFrame.Bar_19
                    break
                end
            end
            PingLabel:GetPropertyChangedSignal("Text"):Connect(
                function()
                    if Settings.Spoofer.PingSpoofer == true then
                        local textrandom = math.random(Settings.Spoofer.PingLeast, Settings.Spoofer.PingMost) / 100
                        PingLabel.Text = textrandom .. " ms"
                        color.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color1.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color2.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color3.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color4.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color5.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color6.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color7.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color8.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color9.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color10.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color11.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color12.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color13.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color14.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color15.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color16.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color17.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color18.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        color19.BackgroundColor3 = Settings.Spoofer.PingTabColor
                        if game.PlaceId == 9825515356 then
                            game:GetService("ReplicatedStorage").MainEvent:FireServer("GetPing", textrandom)
                        end
                    end
                end
            )
